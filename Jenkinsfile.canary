pipeline {
    parameters {

        string(name: 'VERSION1', description: 'Percentage of traffic to be routed to version 1', trim: true)
        string(name: 'VERSION2', description: 'Percentage of traffic to be routed to version 2', trim: true)
    }
    agent {
        label 'kubegit'
    }
    stages {
      /*
        stage('Checkout project') {
            when {
                beforeAgent true
                expression {
                    return (env.VERSION1 != "" && env.VERSION2 != "")
                }
            }
            steps {
                container('git') {
                    sh "git clone https://github.com/${env.GITHUB_ORGANIZATION}/k8s-deploy-production ."
                }
            }
        }
        */
        stage('Update yml files') {
            when {
                beforeAgent true
                expression {
                    return (env.VERSION1 != "" && env.VERSION2 != "")
                }
            }
            steps {
                container('kubectl') {
                    // update images
                    sh "sed -i \"s~weight: .* #v1~weight: ${env.VERSION1} #v1~\" istio/virtual_service_50v1_50v2.yml"
                    sh "sed -i \"s~weight: .* #v2~weight: ${env.VERSION2} #v2~\" istio/virtual_service_50v1_50v2.yml"

                }
            }
        }
        stage('Deploy updated yml') {
            when {
                beforeAgent true
                expression {
                    return (env.VERSION1 != "" && env.VERSION2 != "")
                }
            }
            steps {
                container('kubectl') {
                    sh "cat istio/virtual_service_50v1_50v2.yml"
                    // sh "kubectl describe virtualservices sockshop -n default"
                    sh "kubectl apply -f istio/virtual_service_50v1_50v2.yml -n default"
                    sh "kubectl describe virtualservices sockshop -n default"
                }
            }
        }
        stage('Update configuration change') {
            steps {
                 container("curl") {
                    sh "curl -X POST \"$DT_TENANT_URL/api/v1/events?Api-Token=$DT_API_TOKEN\" -H \"accept: application/json\" -H \"Content-Type: application/json\" -d \"{ \\\"eventType\\\": \\\"CUSTOM_CONFIGURATION\\\", \\\"attachRules\\\": { \\\"tagRule\\\" : [{ \\\"meTypes\\\" : [\\\"SERVICE\\\"], \\\"tags\\\" : [ { \\\"context\\\" : \\\"CONTEXTLESS\\\", \\\"key\\\" : \\\"app\\\", \\\"value\\\" : \\\"front-end\\\" }, { \\\"context\\\" : \\\"CONTEXTLESS\\\", \\\"key\\\" : \\\"environment\\\", \\\"value\\\" : \\\"dev\\\" } ] }] }, \\\"description\\\":\\\"load balancing: v1 0pc , v2 100pc\\\", \\\"source\\\":\\\"Jenkins\\\", \\\"configuration\\\":\\\"load balancer\\\", \\\"customProperties\\\": { \\\"remediationAction\\\": \\\"https://mycoolselfhealing.com\\\" } }\" "
                    // sh "curl -X POST "https://tno85405.live.dynatrace.com/api/v1/events?Api-Token=xwE1XvucQ4ObUHzGQlGBg" -H "accept: application/json" -H "Content-Type: application/json" -d "{ \"eventType\": \"CUSTOM_CONFIGURATION\", \"attachRules\": { \"tagRule\" : [{ \"meTypes\" : [\"SERVICE\"], \"tags\" : [ { \"context\" : \"CONTEXTLESS\", \"key\" : \"app\", \"value\" : \"front-end\" }, { \"context\" : \"CONTEXTLESS\", \"key\" : \"environment\", \"value\" : \"dev\" } ] }] }, \"description\":\"load balancing: v1 0 %, v2 100 %\", \"source\":\"Jenkins\", \"configuration\":\"load balancer\", \"customProperties\": { \"remediationAction\": \"https://mycoolselfhealing.com\" } }" "
              }
            }
        }
    }
}